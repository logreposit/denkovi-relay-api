version: 2.1


orbs:
  maven: circleci/maven@1.0.1
  codecov: codecov/codecov@1.1.1


executors:
  build-container:
    environment:
      _JAVA_OPTIONS: "-Xmx512m"
    docker:
      - image: cimg/openjdk:11.0


jobs:
  compile:
    executor: build-container
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - denkovi-relay-api-{{ checksum "pom.xml" }}
            - denkovi-relay-api-
      - run:
          name: Checking version in pom.xml
          command: |
            version=$(mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q)
            if [ "$version" != "SNAPSHOT" ]; then
                echo "Version in pom.xml is not set to SNAPSHOT"
                exit 1
            fi
            # Setting version so that it's correct in `build-info.properties`
            version=$(git describe)
            mvn versions:set -DnewVersion=${version}
      - run:
          name: Downloading dependencies & compile
          command: |
            mvn -DskipTests clean install dependency:resolve-plugins dependency:go-offline
            # Setting it back to SNAPSHOT for the cache
            mvn versions:set -DnewVersion=SNAPSHOT
      - save_cache:
          paths:
            - ~/.m2
          key: denkovi-relay-api-{{ checksum "pom.xml" }}
      - run:
          name: Setting version
          command: |
            # Setting version again correctly for the following steps
            version=$(git describe)
            mvn versions:set -DnewVersion=${version}
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/*

  backend_tests:
    executor: build-container
    resource_class: small
    steps:
      - attach_workspace:
          at: /home/circleci/
      - restore_cache:
          keys:
            - denkovi-relay-api-{{ checksum "pom.xml" }}
            - denkovi-relay-api-
      - run:
          name: Run Tests
          command: cd backend && mvn test -B
      - maven/process_test_results:
          test_results_path: ~/project/target/surefire-reports
      - codecov/upload:
          when: on_success


  build:
    executor: build-container
    resource_class: small
    steps:
      - attach_workspace:
          at: /home/circleci/
      - restore_cache:
          keys:
            - denkovi-relay-api-{{ checksum "pom.xml" }}
            - denkovi-relay-api-
      - setup_remote_docker
      - run:
          name: Build
          command: |
            version=$(git describe)
            docker_image_tag="logreposit/denkovi-relay-api:${version}"
            mvn versions:set -DnewVersion=${version}

            # build mysql jar
            rm -f "target/denkovi-relay-api-backend.jar"
            mvn -DskipTests=true package
            mv "backend/target/denkovi-relay-api-backend.jar" docker/app.jar

            # build docker image
            echo "Building docker image ${docker_image_tag} ..."
            cd ./docker
            docker build -t ${docker_image_tag} .
            echo "Successfully built image ${docker_image_tag}"
      - run:
          name: Saving docker image
          command: |
            version=$(git describe)
            docker_image_tag="logreposit/denkovi-relay-api:${version}"
            mkdir ~/docker-images/
            docker save ${docker_image_tag} > ~/docker-images/app.tar
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - docker-images/*


  push:
    resource_class: small
    docker:
      - image: cimg/base:stable-18.04
    steps:
      - attach_workspace:
          at: /home/circleci/
      - setup_remote_docker
      - run:
          name: Loading docker image
          command: |
            docker load < ~/docker-images/app.tar
      - run:
          name: Push
          command: |
            version=$(git describe)
            docker_image_tag="logreposit/denkovi-relay-api:${version}"
            echo ${LOGREPOSIT_DOCKERHUB_PASSWORD} | docker login -u ${LOGREPOSIT_DOCKERHUB_USERNAME} --password-stdin
            docker push ${docker_image_tag}
            echo "Successfully pushed image ${docker_image_tag}"


workflows:
  base-workflow:
    jobs:
      - compile:
          context: logreposit
          filters:
            tags:
              ignore:
                - v.*
      - backend_tests:
          context: logreposit
          requires:
            - compile

      - build:
          context: logreposit
          requires:
            - compile

      - push:
          context: logreposit
          requires:
            - build
            - backend_tests
